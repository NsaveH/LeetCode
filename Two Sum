class Solution {
    //                   this is given array        this is given target value
    public int[] twoSum(int[] nums, int target) {
        // write down the logic to solve this problem
        // [2, 7, 11, 15]
        // somehow, you need to find 2 + 7 == 9 ?
        
        // 1. We need to search the array to check what number is there.
        // 2. We need to compare the sum of two numbers is equal to the target.

        // How to access the array element?
        // arrayName[indexNumber] <= the way to access the array
        // nums[0] <= access 0 index element which is accessing the first element of the array
        // What value is in nums[0]? 2
        // How to access 7? nums[1]

        // nums[0] + nums[1] = 2 + 7 = 9 <= sum of two elements

        // How to compare the sum of the two elements to the target?
        // if( nums[0] + nums[1] == target )
        // { do something }

        // These are the hard-code version for the example 1
        // if( nums[0] + nums[1] == target )
        // {
        //     return new int[]{0, 1};
        // }
        // if( nums[0] + nums[2] == target )
        // {
        //     return new int[]{0, 2};
        // }
        // if( nums[1] + nums[2] == target )
        // {
        //     return new int[]{1, 2};
        // }

        // Change with variables

        // Iterative answer (Using for loop)
        // Syntax of for loop
        // for(initialization; condition; increment/decrement)
        for( int i = 0; i < nums.length - 1; i++ )  // looping nums.length - 1 time which is (n - 1) time
        {
            for( int j = i + 1; j < nums.length; j++ ) // j += 1   // looping nums.length - 1 time (n - 1 time)
            {
                if( nums[i] + nums[j] == target )
                {
                    return new int[]{i, j};
                }
            }
        }

        return new int[]{0, 0};
    }
}
